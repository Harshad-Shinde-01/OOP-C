#include <iostream>
using namespace std;

class Complex {
private:
	float real;
	float imag;

public:

	Complex(float r, float i) {
		real=r;
		imag=i;

	}


	friend Complex operator+( Complex& c1,  Complex& c2);
	friend Complex operator-( Complex& c1,  Complex& c2);
	friend Complex operator*( Complex& c1,  Complex& c2);
	friend Complex operator/( Complex& c1,  Complex& c2);



	void display()  {
		if (imag >= 0) {
			cout << real << "+" << imag << "i";
		} else {
			cout << real <<"+"<< imag << "i";
		}
	}
};


//  a + b = (a_real + b_real) + (a_imaginary + b_imaginary)i
Complex operator+( Complex& c1,  Complex& c2) {
	return Complex(c1.real + c2.real, c1.imag + c2.imag);
}

//  a - b = (a_real - b_real) + (a_imaginary - b_imaginary)i
Complex operator-( Complex& c1,  Complex& c2) {
	return Complex(c1.real - c2.real, c1.imag - c2.imag);
}
// (a + bi)(c + di) = (ac - bd) + (ad + bc)i
Complex operator*( Complex& c1,  Complex& c2) {
	return Complex(c1.real*c2.real - c1.imag*c2.imag,
	               c1.real*c2.imag + c1.imag*c2.real);
}
// (a + bi)/(c + di) = [(ac + bd)/(c^2 + d^2)] + [(bc - ad)/(c^2 + d^2)]i
Complex operator/( Complex& c1,  Complex& c2) {
	double denominator = c1.real*c2.real + c1.imag*c2.imag;
	if (denominator == 0) {
		throw runtime_error("Division by zero");
	}
	return Complex((c1.real*c2.real + c1.imag*c2.imag)/denominator,
	               (c1.imag*c2.real - c1.real*c2.imag)/denominator);
}

int main() {
	float real1,real2,img1,img2;
	int stop;
	do {
		cout << "Enter first complex number: ";
		cin>>real1>>img1;
		cout << "\nEnter second complex number: ";
		cin>>real2>>img2;
		Complex c1(real1, img1);
		Complex c2(real2, img2);

		cout << "\nAddition: ";
		(c1+c2).display();
		cout << "\nSubtraction: ";
		(c1-c2).display();
		cout << "\nMultiplication: ";
		(c1*c2).display();
		cout << "\nDivision: ";
		(c1/c2).display();
		cout<<"\n1 for repeat (0 for stop): ";
		cin>>stop;
	} while(stop!=0);

	return 0;
}
